// Package contacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package contacts

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// base route that redirects to /contacts
	// (GET /)
	Index(ctx echo.Context) error
	// get contacts
	// (GET /contacts)
	GetContacts(ctx echo.Context, params GetContactsParams) error
	// new contact form
	// (GET /contacts/new)
	NewContactForm(ctx echo.Context) error
	// create new contact
	// (POST /contacts/new)
	CreateContact(ctx echo.Context) error
	// get contact
	// (GET /contacts/{contactId})
	GetContact(ctx echo.Context, contactId int) error
	// delete contact
	// (POST /contacts/{contactId}/delete)
	DeleteContact(ctx echo.Context, contactId int) error
	// get edit contact form
	// (GET /contacts/{contactId}/edit)
	EditContactForm(ctx echo.Context, contactId int) error
	// edit contact
	// (POST /contacts/{contactId}/edit)
	EditContact(ctx echo.Context, contactId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Index converts echo context to params.
func (w *ServerInterfaceWrapper) Index(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Index(ctx)
	return err
}

// GetContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetContacts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetContactsParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContacts(ctx, params)
	return err
}

// NewContactForm converts echo context to params.
func (w *ServerInterfaceWrapper) NewContactForm(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NewContactForm(ctx)
	return err
}

// CreateContact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateContact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateContact(ctx)
	return err
}

// GetContact converts echo context to params.
func (w *ServerInterfaceWrapper) GetContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contactId", runtime.ParamLocationPath, ctx.Param("contactId"), &contactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContact(ctx, contactId)
	return err
}

// DeleteContact converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contactId", runtime.ParamLocationPath, ctx.Param("contactId"), &contactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteContact(ctx, contactId)
	return err
}

// EditContactForm converts echo context to params.
func (w *ServerInterfaceWrapper) EditContactForm(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contactId", runtime.ParamLocationPath, ctx.Param("contactId"), &contactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EditContactForm(ctx, contactId)
	return err
}

// EditContact converts echo context to params.
func (w *ServerInterfaceWrapper) EditContact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "contactId" -------------
	var contactId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contactId", runtime.ParamLocationPath, ctx.Param("contactId"), &contactId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.EditContact(ctx, contactId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Index)
	router.GET(baseURL+"/contacts", wrapper.GetContacts)
	router.GET(baseURL+"/contacts/new", wrapper.NewContactForm)
	router.POST(baseURL+"/contacts/new", wrapper.CreateContact)
	router.GET(baseURL+"/contacts/:contactId", wrapper.GetContact)
	router.POST(baseURL+"/contacts/:contactId/delete", wrapper.DeleteContact)
	router.GET(baseURL+"/contacts/:contactId/edit", wrapper.EditContactForm)
	router.POST(baseURL+"/contacts/:contactId/edit", wrapper.EditContact)

}
